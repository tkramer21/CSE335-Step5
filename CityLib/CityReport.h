/**
 * @file CityReport.h
 *
 * @author Charles B. Owen
 *
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
 */

#pragma once

#include <memory>
#include <vector>
#include <random>
#include <list>
#include "Tile.h"

class City;
class MemberReport;

/**
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
*/
class CityReport
{
private:
    /// The city this report is for
    City* mCity;

protected:
    /// Size of the bins in the linked list
    static const int BinSize = 7;

    /// A bin stores up to 7 city reports in a
    /// single linked list node.
    class ReportsBin {
    public:
        /// A place to store the reports in this bin
        /// Up to 5 reports can be stored, followed by
        /// a null pointer after the last report pointer.
        std::shared_ptr<MemberReport> mReports[BinSize+1];

        bool IsFull();
        void Add(std::shared_ptr<MemberReport> report);
    };

    /// The collection of reports
    std::list<std::shared_ptr<ReportsBin>> mReportBins;

public:
    explicit CityReport(City* city);

    void Add(std::shared_ptr<MemberReport> report);

	/** Iterator that iterates over the city report */
	class Iter
	{
	private:
		/// city report iterating over
		CityReport* mCityReport;

		/// an interator that holds the position in the lsit
		std::list<std::shared_ptr<ReportsBin>>::iterator mPos;

		/// an int that represents the position in the subarray
		int mSubPos;

	public:
		/** Constructor
		 *
		 * @param cityReport the city report we are iterating over
		 * @param pos Position in the containing list
		 */
		Iter(CityReport* cityReport, std::list<std::shared_ptr<ReportsBin>>::iterator pos)
			: mCityReport(cityReport), mPos(pos), mSubPos(0){}

		/**
		 * Compare two iterators
		 * @param other The other iterator we are comparing to
		 * @return true if pos is not equal
		 */
		 bool operator!=(const Iter& other) const
		{
			 return mPos != other.mPos || mSubPos != other.mSubPos;
		}


		/**
		 * Get the value at the current position
		 * @return Value at mPos & mSubPos in the collection
		 */
		std::shared_ptr<MemberReport> operator *() const
		{
			return (*mPos)->mReports[mSubPos];
		}

		/**
		 * Increment the iterator
		 * @return Reference to the iterator
		 */
		const Iter& operator++()
		{
			mSubPos++;
			if(mSubPos >= BinSize || (*mPos)->mReports[mSubPos] == nullptr)
			{
				mSubPos = 0;
				mPos++;
			}
			return *this;
		}
	};
	/**
 	* Get an iterator for the beginning of the collection
 	* @return Iter object at position 0
 	*/
	Iter begin() { return Iter(this, mReportBins.begin());}

	/**
	 * Get an iterator for the end of the collection
	 * @return Iter object at position past the end
	 */
	Iter end() { return Iter(this, mReportBins.end());}
};

